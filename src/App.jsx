import React, { useState, useEffect } from 'react';

// Define available functions and their properties
const functions = {
    horoscope: {
        key: 'horoscope',
        title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤–∞—à–µ–º –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ –∏–ª–∏ –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–∞–¥–∏–º –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –õ—é–±–æ–≤—å, –ö–∞—Ä—å–µ—Ä–∞, –ó–¥–æ—Ä–æ–≤—å–µ.',
        inputs: ['zodiacSign', 'userBirthTime'], // Added userBirthTime
        icon: 'üåü',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø'
    },
    compatibility: {
        key: 'compatibility',
        title: '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–º–µ–Ω',
        description: '–£–∑–Ω–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ —Å –∏–º–µ–Ω–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –§–∏–∑–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–∞–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.',
        inputs: ['userName', 'partnerName'],
        icon: '‚ù§Ô∏è',
        generateButtonText: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'
    },
    compatibilityBirthDates: {
        key: 'compatibilityBirthDates',
        title: '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ª—é–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è. –†–∞–∑–±–µ–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—É–Ω–∫—Ç—ã: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ, –§–∏–∑–∏—á–µ—Å–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–∞–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.',
        inputs: ['userBirthDate', 'partnerBirthDate'],
        icon: 'üíû',
        generateButtonText: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è'
    },
    numerology: {
        key: 'numerology',
        title: '–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤–∞—à–µ–º –∏–º–µ–Ω–∏, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —É–¥–∞—á—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.',
        inputs: ['userName'],
        icon: 'üî¢',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑'
    },
    affirmation: {
        key: 'affirmation',
        title: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é –∏–ª–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—è.',
        inputs: [],
        icon: '‚ú®',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é'
    },
    funFact: {
        key: 'funFact',
        title: '–≠–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç',
        description: '–£–∑–Ω–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –∏–∑ –º–∏—Ä–∞ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏–ª–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏.',
        inputs: [],
        icon: 'üìö',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç'
    },
    dailyAdvice: {
        key: 'dailyAdvice',
        title: '–°–æ–≤–µ—Ç –¥–Ω—è',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.',
        inputs: [],
        icon: 'üí°',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –¥–Ω—è'
    },
    tarotCard: {
        key: 'tarotCard',
        title: '–ö–∞—Ä—Ç–∞ –¢–∞—Ä–æ –¥–Ω—è',
        description: '–í—ã—Ç—è–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –¥–Ω—è —Å –∫—Ä–∞—Ç–∫–∏–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é –Ω–µ–¥–µ–ª–∏. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ–¥–Ω—É –∏–ª–∏ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã.',
        inputs: ['tarotSpread'], // Added tarotSpread input
        icon: 'üÉè',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –¥–Ω—è'
    },
    birthPrediction: {
        key: 'birthPrediction',
        title: '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –≤–∞—à–µ–π –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è.',
        inputs: ['userBirthDate'],
        icon: 'üéÇ',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è'
    },
    lunarCalendar: {
        key: 'lunarCalendar',
        title: '–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
        description: '–£–∑–Ω–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –õ—É–Ω—ã –∏ –µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.',
        inputs: [],
        icon: 'üåï',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'
    },
    personalAmulet: {
        key: 'personalAmulet',
        title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–º—É–ª–µ—Ç/—Ç–∞–ª–∏—Å–º–∞–Ω –¥–Ω—è',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–º—É–ª–µ—Ç–∞ –∏–ª–∏ —Ç–∞–ª–∏—Å–º–∞–Ω–∞ (–∫–∞–º–µ–Ω—å, —Ü–≤–µ—Ç, —Å–∏–º–≤–æ–ª), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è.',
        inputs: ['zodiacSign'],
        icon: 'üíé',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å –∞–º—É–ª–µ—Ç –¥–Ω—è'
    },
    retrogradePlanets: {
        key: 'retrogradePlanets',
        title: '–†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ',
        description: '–£–∑–Ω–∞–π—Ç–µ –æ —Ç–µ–∫—É—â–∏—Ö —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö –∏ –∏—Ö –æ–±—â–µ–º –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.',
        inputs: [],
        icon: 'ü™ê',
        generateButtonText: '–£–∑–Ω–∞—Ç—å –æ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ö'
    },
    dreamInterpretation: {
        key: 'dreamInterpretation',
        title: '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤',
        description: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–Ω, –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤–æ–∑–º–æ–∂–Ω–æ–µ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ.',
        inputs: ['dreamDescription'],
        icon: 'üò¥',
        generateButtonText: '–ò—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å —Å–æ–Ω'
    },
    astrologicalCalendar: {
        key: 'astrologicalCalendar',
        title: '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π',
        description: '–£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤–∞–∂–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ –∏—Ö –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.',
        inputs: [],
        icon: 'üóìÔ∏è',
        generateButtonText: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è'
    },
    biorhythmCheck: {
        key: 'biorhythmCheck',
        title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–æ—Ä–∏—Ç–º–æ–≤',
        description: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–∞—Ö.',
        inputs: ['userBirthDate'],
        icon: 'üìà',
        generateButtonText: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–æ—Ä–∏—Ç–º—ã'
    },
    positiveFocus: {
        key: 'positiveFocus',
        title: '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ñ–æ–∫—É—Å –¥–Ω—è',
        description: '–ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–æ–∏—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è, —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å.',
        inputs: ['focusCategory'],
        icon: 'üéØ',
        generateButtonText: '–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å'
    },
    questionToUniverse: {
        key: 'questionToUniverse',
        title: '–í–æ–ø—Ä–æ—Å –∫ –í—Å–µ–ª–µ–Ω–Ω–æ–π',
        description: '–ó–∞–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–π –∏–ª–∏ –∞–ª–ª–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.',
        inputs: ['userQuestion'],
        icon: 'üåå',
        generateButtonText: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
    },
    archetypeOfDay: {
        key: 'archetypeOfDay',
        title: '–ê—Ä—Ö–µ—Ç–∏–ø –¥–Ω—è',
        description: '–£–∑–Ω–∞–π—Ç–µ, —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞–∫–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú—É–¥—Ä–µ—Ü, –ì–µ—Ä–æ–π) –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è.',
        inputs: [],
        icon: 'üé≠',
        generateButtonText: '–£–∑–Ω–∞—Ç—å –∞—Ä—Ö–µ—Ç–∏–ø'
    }
};

// Define themes
const themes = {
    darkMagic: {
        name: '–¢–µ–º–Ω–∞—è –º–∞–≥–∏—è',
        gradient: 'from-gray-900 to-purple-900',
        cardBorder: 'border-purple-700',
        textColor: 'text-purple-200',
        inputBg: 'bg-gray-700 bg-opacity-50',
        inputBorder: 'border-gray-600',
        inputPlaceholder: 'placeholder-gray-400',
        inputFocusRing: 'focus:ring-purple-500',
        buttonBg: 'bg-purple-900 bg-opacity-30 hover:bg-purple-800 hover:bg-opacity-50', // More subtle, then slightly more opaque on hover
        buttonFocusRing: 'focus:ring-purple-600',
        secondaryButtonBg: 'bg-gray-700 hover:bg-gray-800',
        secondaryButtonFocusRing: 'focus:ring-gray-600',
        errorBg: 'bg-red-800 bg-opacity-30',
        errorBorder: 'border-red-700',
        errorText: 'text-red-300',
        loaderBorder: 'border-purple-500',
        h1Color: 'text-purple-300',
        h2Color: 'text-purple-300',
        pColor: 'text-gray-100',
        selectOptionBg: 'bg-gray-900',
        // Crystal Ball specific styles
        crystalBallBackground: 'radial-gradient(circle at 40% 30%, rgba(255, 255, 255, 0.1) 0%, rgba(128, 0, 128, 0.3) 30%, rgba(0,0,0,0.7) 100%), linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(0,0,0,0.2) 100%)',
        crystalBallAnimation: 'pulse-dark-glow',
        crystalBallShadowStart: 'inset 10px 10px 20px rgba(255, 255, 255, 0.05), inset -10px -10px 20px rgba(0, 0, 0, 0.4), 0 0 20px rgba(128,0,128,0.6), 0 0 40px rgba(128,0,128,0.4)',
        crystalBallShadowEnd: 'inset 10px 10px 20px rgba(255, 255, 255, 0.05), inset -10px -10px 20px rgba(0, 0, 0, 0.4), 0 0 30px rgba(128,0,128,0.8), 0 0 60px rgba(128,0,128,0.6)',
        textGlowColor: 'rgba(216, 180, 254, 0.8)', // purple-200 with opacity
        textGlowColorSecondary: 'rgba(216, 180, 254, 0.4)'
    },
    lightEnergy: {
        name: '–°–≤–µ—Ç–ª–∞—è —ç–Ω–µ—Ä–≥–∏—è',
        gradient: 'from-blue-100 to-indigo-300',
        cardBorder: 'border-blue-400',
        textColor: 'text-indigo-800',
        inputBg: 'bg-white bg-opacity-90',
        inputBorder: 'border-blue-300',
        inputPlaceholder: 'placeholder-blue-400',
        inputFocusRing: 'focus:ring-blue-500',
        buttonBg: 'bg-blue-300 bg-opacity-30 hover:bg-blue-400 hover:bg-opacity-50',
        buttonFocusRing: 'focus:ring-blue-400',
        secondaryButtonBg: 'bg-gray-300 hover:bg-gray-400',
        secondaryButtonFocusRing: 'focus:ring-gray-200',
        errorBg: 'bg-red-200 bg-opacity-70',
        errorBorder: 'border-red-300',
        errorText: 'text-red-700',
        loaderBorder: 'border-blue-500',
        h1Color: 'text-indigo-700',
        h2Color: 'text-indigo-700',
        pColor: 'text-gray-800',
        selectOptionBg: 'bg-white',
        // Crystal Ball specific styles
        crystalBallBackground: 'radial-gradient(circle at 40% 30%, rgba(255, 255, 255, 0.5) 0%, rgba(66, 153, 225, 0.6) 30%, rgba(255,255,255,0.9) 100%), linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(0,0,0,0.1) 100%)',
        crystalBallAnimation: 'pulse-light-glow',
        crystalBallShadowStart: 'inset 10px 10px 20px rgba(255, 255, 255, 0.3), inset -10px -10px 20px rgba(0, 0, 0, 0.2), 0 0 20px rgba(66,153,225,0.6), 0 0 40px rgba(66,153,225,0.4)',
        textGlowColor: 'rgba(66, 153, 225, 0.8)', // blue-500 with opacity
        textGlowColorSecondary: 'rgba(66, 153, 225, 0.4)'
    },
    cosmicBlues: {
        name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–ª—é–∑',
        gradient: 'from-blue-900 to-teal-900',
        cardBorder: 'border-teal-700',
        textColor: 'text-teal-200',
        inputBg: 'bg-blue-700 bg-opacity-40',
        inputBorder: 'border-blue-600',
        inputPlaceholder: 'placeholder-blue-300',
        inputFocusRing: 'focus:ring-teal-400',
        buttonBg: 'bg-teal-900 bg-opacity-30 hover:bg-teal-800 hover:bg-opacity-50',
        buttonFocusRing: 'focus:ring-teal-500',
        secondaryButtonBg: 'bg-blue-700 hover:bg-blue-800',
        secondaryButtonFocusRing: 'focus:ring-blue-600',
        errorBg: 'bg-red-700 bg-opacity-20',
        errorBorder: 'border-red-600',
        errorText: 'text-red-200',
        loaderBorder: 'border-teal-400',
        h1Color: 'text-teal-300',
        h2Color: 'text-teal-300',
        pColor: 'text-blue-100',
        selectOptionBg: 'bg-blue-900',
        // Crystal Ball specific styles
        crystalBallBackground: 'radial-gradient(circle at 40% 30%, rgba(255, 255, 255, 0.2) 0%, rgba(0, 128, 128, 0.5) 30%, rgba(0,0,0,0.9) 100%), linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(0,0,0,0.2) 100%)',
        crystalBallAnimation: 'pulse-cosmic-glow',
        crystalBallShadowStart: 'inset 10px 10px 20px rgba(255, 255, 255, 0.1), inset -10px -10px 20px rgba(0, 0, 0, 0.4), 0 0 20px rgba(0,128,128,0.6), 0 0 40px rgba(0,128,128,0.4)',
        textGlowColor: 'rgba(129, 230, 217, 0.8)', // teal-200 with opacity
        textGlowColorSecondary: 'rgba(129, 230, 217, 0.4)'
    }
};

// CSS Keyframes for global animations
const GlobalStyles = () => (
    <style>
        {`
        @keyframes background-shift {
            0% { background-position: 0% 0%; }
            50% { background-position: 100% 100%; }
            100% { background-position: 0% 0%; }
        }

        .background-animated {
            background-size: 400% 400%; /* Make gradient larger than screen */
            animation: background-shift 15s infinite alternate; /* Slower, more subtle animation */
        }

        /* Pulsing glow animations for crystal ball */
        @keyframes pulse-dark-glow {
            0%, 100% { box-shadow: var(--crystal-ball-shadow-start); }
            50% { box-shadow: var(--crystal-ball-shadow-end); }
        }
        @keyframes pulse-light-glow {
            0%, 100% { box-shadow: var(--crystal-ball-shadow-start); }
            50% { box-shadow: var(--crystal-ball-shadow-end); }
        }
        @keyframes pulse-cosmic-glow {
            0%, 100% { box-shadow: var(--crystal-ball-shadow-start); }
            50% { box-shadow: var(--crystal-ball-shadow-end); }
        }

        /* Inner fog animation */
        @keyframes fog-move {
            0% { transform: translate(-50%, -50%) scale(1); opacity: 0.3; } /* Increased base opacity */
            50% { transform: translate(-45%, -55%) scale(1.05); opacity: 0.5; } /* Increased peak opacity */
            100% { transform: translate(-50%, -50%) scale(1); opacity: 0.3; }
        }

        /* Prediction text reveal */
        @keyframes text-reveal {
            0% { opacity: 0; transform: translateY(20px); }
            100% { opacity: 1; transform: translateY(0); }
        }

        /* Background star animation */
        @keyframes star-field-pan {
            0% { background-position: 0% 0%; }
            100% { background-position: 100% 100%; }
        }

        /* Northern Lights specific animations */
        @keyframes aurora-move {
            0% { background-position: 0% 0%; }
            100% { background-position: 100% 100%; }
        }

        @keyframes aurora-color {
            0% { filter: hue-rotate(0deg); opacity: 0.5; }
            50% { filter: hue-rotate(180deg); opacity: 0.8; }
            100% { filter: hue-rotate(360deg); opacity: 0.5; }
        }

        .crystal-ball {
            width: min(70vw, 600px); /* Max 600px, 70vw for responsiveness */
            height: min(70vw, 600px); /* Ensure it's always a square, maintaining circularity */
            border-radius: 9999px; /* Force rounded-full */
            flex-shrink: 0; /* Prevent shrinking */
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center; /* Centered content vertically */
            overflow: hidden; /* Crucial for maintaining circular shape and clipping content */
            transition: all 0.5s ease-in-out; /* Smooth transitions for theme changes */
            z-index: 1; /* Ball is now the primary element */
            margin-bottom: 0; /* No margin needed without stand */
            backdrop-filter: blur(5px); /* Distortion effect */
            filter: url(#noiseFilter); /* Micro-cracks/imperfections */
        }

        .crystal-ball.touch-active {
            transform: scale(1.02);
            box-shadow: 0 0 40px rgba(255,255,255,0.3), var(--crystal-ball-shadow-start); /* Enhanced glow on touch */
        }

        .crystal-ball-content-wrapper {
            flex-grow: 0; /* Ensures content does not stretch, relies on justify-content: center */
            width: 100%; /* Take full width of parent flex item */
            max-width: 80%; /* Increased content width relative to ball */
            height: 100%; /* Ensure it takes full height for scrolling */
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center; /* Centered content vertically */
            padding: 1rem; /* Padding for content inside the ball */
            overflow-y: auto; /* Allow vertical scrolling if content overflows */
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
            margin: 0 auto; /* Center horizontally */
            /* Hide scrollbar */
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
            position: relative; /* For z-index of content */
            z-index: 10; /* Content above internal effects */
        }
        .crystal-ball-content-wrapper::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Opera */
        }

        /* Fade-out effect for scrollable content */
        /* This mask is now applied to a specific div containing only the text content */
        .fade-out-mask-text {
            mask-image: linear-gradient(to bottom, black 80%, transparent 95%); /* Adjusted for more subtle fade */
            -webkit-mask-image: linear-gradient(to bottom, black 80%, transparent 95%);
        }


        .inner-fog {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 150%;
            height: 150%;
            border-radius: 50%;
            background: radial-gradient(circle at center, rgba(255,255,255,0.2) 0%, transparent 70%); /* Slightly more opaque base for fog */
            animation: fog-move 15s infinite ease-in-out alternate;
            z-index: 5;
        }

        .prediction-text-reveal {
            animation: text-reveal 1s ease-out forwards;
        }

        /* Adjustments for carousel */
        .carousel-container {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow-x: hidden; /* Ensure hidden elements are not visible */
        }

        .carousel-track {
            display: flex;
            height: 100%;
            width: 100%; /* Each page takes full width of the track */
            transition: transform 0.5s ease-in-out; /* Smooth slide animation */
        }

        .carousel-page {
            flex-shrink: 0; /* Prevent pages from shrinking */
            width: 100%;
            height: 100%;
            display: flex; /* Changed to flex for better centering of single item */
            align-items: center; /* Center item vertically */
            justify-content: center; /* Center item horizontally */
            padding: 0.5rem; /* Reduced padding for the page to maximize button size */
            box-sizing: border-box; /* Include padding in width calculation */
        }

        /* Responsive adjustments for buttons */
        .carousel-page button {
            width: 180px; /* Default width for mobile */
            height: 250px; /* Default height for mobile */
            padding: 0.8rem; /* Adjusted padding for smaller card */
            font-size: 0.9rem; /* Base font size */
            border: 1px solid; /* Add a subtle border */
            backdrop-filter: blur(3px); /* Add a subtle blur effect */
            -webkit-backdrop-filter: blur(3px); /* For Safari */
            transition: all 0.3s ease-in-out; /* Smooth transitions */
            display: flex; /* Make it a flex container */
            flex-direction: column; /* Stack content vertically */
            align-items: center; /* Changed to center for vertical centering */
            justify-content: center; /* Changed to center for horizontal centering */
            text-align: center; /* Ensure text is centered */
            overflow-y: auto; /* Allow vertical scrolling if content overflows */
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
            box-sizing: border-box; /* Ensure padding is included in width/height */
            flex-shrink: 0; /* Explicitly prevent shrinking */
            flex-grow: 0; /* Changed to 0, or removed, to rely on fixed dimensions */
        }

        @media (min-width: 640px) { /* Styles for small screens and up (sm breakpoint) */
            .carousel-page button {
                width: 234px; /* Larger width for desktop (180 * 1.3) */
                height: 325px; /* Larger height for desktop (250 * 1.3) */
                padding: 1rem; /* Adjusted padding for larger card */
                font-size: 1rem; /* Larger font size */
            }
        }

        .carousel-page button::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Opera */
        }

        .carousel-page button span:first-child { /* Icon */
            font-size: 1.8rem; /* Adjusted icon size for mobile */
            margin-bottom: 0.4rem; /* Space between icon and title */
        }
        @media (min-width: 640px) {
            .carousel-page button span:first-child {
                font-size: 2rem; /* Larger icon size for desktop */
            }
        }

        .carousel-page button span:nth-child(2) { /* Title */
            font-size: 0.9rem; /* Adjusted title size for mobile */
            font-weight: bold;
            margin-bottom: 0.4rem; /* Space between title and description */
            line-height: 1.2;
            width: 100%; /* Ensure it takes full width for left alignment */
        }
        @media (min-width: 640px) {
            .carousel-page button span:nth-child(2) {
                font-size: 1rem; /* Larger title size for desktop */
            }
        }

        .carousel-page button span:last-child { /* Description */
            font-size: 0.7rem; /* Adjusted description size for mobile */
            line-height: 1.4;
            opacity: 0.9; /* Slightly less prominent */
            width: 100%; /* Ensure it takes full width for left alignment */
        }
        @media (min-width: 640px) {
            .carousel-page button span:last-child {
                font-size: 0.75rem; /* Larger description size for desktop */
            }
        }


        .carousel-page button:hover {
            transform: scale(1.02); /* Slightly less scale on hover for large button */
            box-shadow: 0 0 25px var(--button-glow-color); /* Stronger glow on hover */
        }

        /* Theme specific button styles */
        .theme-darkMagic .carousel-page button {
            border-color: rgba(128, 0, 128, 0.6);
            --button-glow-color: rgba(128,0,128,0.8);
        }

        .theme-lightEnergy .carousel-page button {
            border-color: rgba(66, 153, 225, 0.6);
            --button-glow-color: rgba(66,153,225,0.8);
        }

        .theme-cosmicBlues .carousel-page button {
            border-color: rgba(0, 128, 128, 0.6);
            --button-glow-color: rgba(0,128,128,0.8);
        }

        /* Adjustments for input/result view elements */
        .crystal-ball-content-wrapper h2 { /* Function Title in input/details view */
            font-size: 1.25rem; /* Further reduced from 1.35rem */
            line-height: 1.2;
            margin-bottom: 0.8rem; /* Further reduced margin */
            text-shadow: 0 0 5px rgba(255,255,255,0.7); /* Added text shadow */
        }
        @media (min-width: 640px) {
            .crystal-ball-content-wrapper h2 {
                font-size: 1.6rem; /* Adjusted for sm breakpoint, slightly smaller than before */
            }
        }

        .crystal-ball-content-wrapper p { /* Description in details view, generated content */
            font-size: 0.85rem; /* Further reduced from 0.9rem */
            line-height: 1.6; /* Slightly looser line height for better readability */
            margin-bottom: 1rem; /* Further reduced margin */
            text-shadow: 0 0 10px var(--text-glow-color), 0 0 20px var(--text-glow-color-secondary); /* Dynamic glow */
        }
        @media (min-width: 640px) {
            .crystal-ball-content-wrapper p {
                font-size: 0.95rem; /* Adjusted for sm breakpoint */
            }
        }

        .crystal-ball-content-wrapper label { /* Input labels */
            font-size: 0.75rem; /* Further reduced from 0.8rem */
            margin-bottom: 0.15rem; /* Further reduced margin */
        }

        .crystal-ball-content-wrapper input,
        .crystal-ball-content-wrapper textarea,
        .crystal-ball-content-wrapper select { /* Input fields */
            padding: 0.35rem 0.5rem; /* Further reduced padding */
            font-size: 0.8rem; /* Further reduced font size for inputs */
        }
        @media (min-width: 640px) {
            .crystal-ball-content-wrapper input,
            .crystal-ball-content-wrapper textarea,
            .crystal-ball-content-wrapper select {
                padding: 0.5rem 0.75rem; /* Slightly more padding for desktop */
                font-size: 0.9rem; /* Slightly reduced font size */
            }
        }

        .crystal-ball-content-wrapper button { /* Buttons in input/result view */
            padding: 0.5rem 0.9rem; /* Further reduced padding */
            font-size: 0.8rem; /* Further reduced font size */
        }
        @media (min-width: 640px) {
            .crystal-ball-content-wrapper button {
                padding: 0.65rem 1.1rem; /* Slightly more padding for desktop */
                font-size: 0.9rem; /* Slightly reduced font size */
            }
        }

        .crystal-ball-content-wrapper .grid {
            gap: 0.7rem; /* Further reduced gap between input fields */
            margin-bottom: 1rem; /* Further reduced margin below input grid */
        }

        .crystal-ball-content-wrapper .flex.flex-col.sm\\:flex-row {
            gap: 0.5rem; /* Further reduced gap between buttons */
            margin-bottom: 1rem; /* Further reduced margin below button group */
        }

        /* Removed the specific styling for the generated content box */
        /* .crystal-ball-content-wrapper .bg-gray-800 {
            padding: 0.9rem;
        } */

        /* Custom styles for carousel arrows */
        .carousel-arrow-button {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            padding: 0.75rem; /* Increased padding for better touch target */
            border-radius: 9999px; /* Full rounded */
            z-index: 10;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease-in-out;
            border: 1px solid; /* Add a subtle border */
            backdrop-filter: blur(5px); /* Stronger blur for a mystical feel */
            -webkit-backdrop-filter: blur(5px); /* For Safari */
        }

        .carousel-arrow-button:hover {
            transform: translateY(-50%) scale(1.1); /* Slightly larger on hover */
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.3); /* Subtle white glow on hover */
        }

        .carousel-arrow-button.left-arrow {
            left: 0.5rem; /* Position from left */
        }

        .carousel-arrow-button.right-arrow {
            right: 0.5rem; /* Position from right */
        }

        .carousel-arrow-svg {
            width: 1.5rem; /* Size of the SVG icon */
            height: 1.5rem;
        }

        /* Theme specific arrow styles */
        .theme-darkMagic .carousel-arrow-button {
            background-color: rgba(128, 0, 128, 0.2); /* Purple with transparency */
            border-color: rgba(128, 0, 128, 0.6);
            color: #d8b4fe; /* Light purple text */
        }
        .theme-darkMagic .carousel-arrow-button:hover {
            background-color: rgba(128, 0, 128, 0.4);
        }

        .theme-lightEnergy .carousel-arrow-button {
            background-color: rgba(66, 153, 225, 0.2); /* Blue with transparency */
            border-color: rgba(66, 153, 225, 0.6);
            color: #4299e1; /* Light blue text */
        }
        .theme-lightEnergy .carousel-arrow-button:hover {
            background-color: rgba(66, 153, 225, 0.4);
        }

        .theme-cosmicBlues .carousel-arrow-button {
            background-color: rgba(0, 128, 128, 0.2); /* Teal with transparency */
            border-color: rgba(0, 128, 128, 0.6);
            color: #81e6d9; /* Light teal text */
        }
        .theme-cosmicBlues .carousel-arrow-button:hover {
            background-color: rgba(0, 128, 128, 0.4);
        }

        /* Styles for the function list modal */
        .function-list-modal-overlay {
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 1); /* Made fully opaque */
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 50;
            padding: 1rem;
        }

        .function-list-modal {
            background-color: var(--modal-bg-color); /* Use CSS variable for theme-specific color */
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 100%;
            max-height: 80vh;
            overflow-y: auto;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid var(--modal-border-color); /* Use CSS variable for theme-specific color */
            transition: all 0.3s ease-in-out;
            display: flex;
            flex-direction: column;
            opacity: 1; /* Explicitly set to 1 to ensure full opacity */
        }

        .function-list-modal h3 {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 1.5rem;
            color: var(--modal-h3-color); /* Use CSS variable for theme-specific color */
        }

        .function-list-modal-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); /* Responsive grid */
            gap: 0.75rem;
            padding-bottom: 1rem; /* Space for scrollbar */
        }

        .function-list-modal-grid button {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 0.75rem;
            border-radius: 0.5rem;
            background-color: var(--modal-button-bg); /* Use CSS variable for theme-specific color */
            color: var(--modal-button-text-color); /* Use CSS variable for theme-specific color */
            font-size: 0.8rem;
            font-weight: 500;
            text-align: center;
            transition: all 0.2s ease-in-out;
            border: 1px solid var(--modal-button-border); /* Use CSS variable for theme-specific color */
            height: 100px; /* Fixed height for uniformity */
        }

        .function-list-modal-grid button:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            background-color: var(--modal-button-hover-bg); /* Use CSS variable for theme-specific color */
        }

        .function-list-modal-grid button span:first-child {
            font-size: 1.8rem;
            margin-bottom: 0.25rem;
        }

        .function-list-modal-grid button span:nth-child(2) {
            line-height: 1.2;
        }

        .function-list-modal-close-button {
            margin-top: 1.5rem;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            background-color: var(--modal-close-button-bg); /* Use CSS variable for theme-specific color */
            color: white;
            font-weight: bold;
            transition: all 0.2s ease-in-out;
        }

        .function-list-modal-close-button:hover {
            background-color: var(--modal-close-button-hover-bg); /* Use CSS variable for theme-specific color */
            transform: scale(1.05);
        }

        /* Theme specific modal styles */
        .theme-darkMagic .function-list-modal {
            --modal-bg-color: #1a202c; /* gray-900 */
            --modal-border-color: #6b46c1; /* purple-700 */
            --modal-h3-color: #d8b4fe; /* purple-300 */
            --modal-button-bg: #4a004a; /* Darker purple for buttons */
            --modal-button-text-color: #d8b4fe;
            --modal-button-border: #800080;
            --modal-button-hover-bg: #6b006b;
            --modal-close-button-bg: #4a5568; /* gray-700 */
            --modal-close-button-hover-bg: #2d3748; /* gray-800 */
        }

        .theme-lightEnergy .function-list-modal {
            --modal-bg-color: #ffffff;
            --modal-border-color: #63b3ed; /* blue-400 */
            --modal-h3-color: #3182ce; /* blue-600 */
            --modal-button-bg: #e0f2fe; /* Light blue for buttons */
            --modal-button-text-color: #2b6cb0; /* blue-700 */
            --modal-button-border: #90cdf4;
            --modal-button-hover-bg: #bfdbfe;
            --modal-close-button-bg: #a0aec0; /* gray-400 */
            --modal-close-button-hover-bg: #718096; /* gray-500 */
        }

        .theme-cosmicBlues .function-list-modal {
            --modal-bg-color: #0a192f; /* Darker blue */
            --modal-border-color: #38b2ac; /* teal-500 */
            --modal-h3-color: #81e6d9; /* teal-300 */
            --modal-button-bg: #0f3460; /* Darker blue for buttons */
            --modal-button-text-color: #81e6d9;
            --modal-button-border: #38b2ac;
            --modal-button-hover-bg: #1a4e8c;
            --modal-close-button-bg: #2c5282; /* blue-700 */
            --modal-close-button-hover-bg: #2a4365; /* blue-800 */
        }

        /* Background elements (stars/particles) */
        .background-elements {
            position: fixed;
            inset: 0;
            z-index: 0;
            /* Base stars */
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><circle cx="10" cy="10" r="1" fill="rgba(255,255,255,0.8)" /><circle cx="50" cy="50" r="0.5" fill="rgba(255,255,255,0.6)" /><circle cx="90" cy="20" r="0.7" fill="rgba(255,255,255,0.7)" /><circle cx="30" cy="80" r="0.6" fill="rgba(255,255,255,0.5)" /></svg>') repeat;
            background-size: 200px 200px; /* Larger pattern for slower movement */
            animation: star-field-pan 60s linear infinite; /* Slower animation */
            opacity: 0.3;
        }

        .background-elements.layer-2 {
            background-size: 150px 150px; /* Smaller pattern for faster movement (closer) */
            animation: star-field-pan 45s linear infinite; /* Faster animation */
            opacity: 0.2;
            transform: scale(1.1); /* Slightly larger to enhance depth */
        }

        .background-elements.layer-3 {
            background-size: 100px 100px; /* Even smaller/faster */
            animation: star-field-pan 30s linear infinite;
            opacity: 0.15;
            transform: scale(1.2);
        }

        /* Northern Lights background layer */
        .northern-lights-bg {
            position: fixed;
            inset: 0;
            z-index: 5; /* Between stars and crystal ball */
            background: linear-gradient(
                to right,
                rgba(0, 255, 0, 0.1), /* Green */
                rgba(0, 200, 255, 0.1), /* Cyan */
                rgba(150, 0, 255, 0.1), /* Purple */
                rgba(0, 200, 255, 0.1),
                rgba(0, 255, 0, 0.1)
            );
            background-size: 300% 300%; /* Large background for smooth movement */
            animation: aurora-move 40s linear infinite, aurora-color 20s ease-in-out infinite alternate;
            filter: blur(50px) brightness(1.2); /* Heavy blur for ethereal glow */
            opacity: 0.4; /* Base opacity */
            pointer-events: none; /* Allow clicks to pass through */
        }

        /* Vignette effect */
        .vignette {
            position: fixed;
            inset: 0;
            background: radial-gradient(ellipse at center, transparent 0%, rgba(0,0,0,0.5) 75%);
            z-index: 40;
            pointer-events: none; /* Allows clicks to pass through */
        }

        /* Full content modal styles */
        .full-content-modal-overlay {
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.9); /* Opaque background */
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 60; /* Higher than other modals */
            padding: 1rem;
        }

        .full-content-modal {
            background-color: var(--modal-bg-color);
            border-radius: 0.75rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5);
            max-width: 700px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            padding: 2rem;
            text-align: left; /* Align text left for better readability */
            border: 1px solid var(--modal-border-color);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .full-content-modal p {
            font-size: 1rem; /* Standard font size for full content */
            line-height: 1.7; /* Good line height for readability */
            color: var(--modal-text-color); /* Use theme text color */
            text-shadow: none; /* No glow effect for plain text */
            overflow-wrap: break-word; /* Ensure long words break */
        }
        .full-content-modal::-webkit-scrollbar {
            width: 8px;
        }
        .full-content-modal::-webkit-scrollbar-track {
            background: rgba(0,0,0,0.1);
            border-radius: 10px;
        }
        .full-content-modal::-webkit-scrollbar-thumb {
            background: var(--modal-scrollbar-thumb);
            border-radius: 10px;
        }

        /* Theme specific modal text colors */
        .theme-darkMagic .full-content-modal {
            --modal-text-color: #d8b4fe; /* purple-200 */
            --modal-scrollbar-thumb: #800080; /* purple */
        }
        .theme-lightEnergy .full-content-modal {
            --modal-text-color: #2d3748; /* gray-800 */
            --modal-scrollbar-thumb: #4299e1; /* blue */
        }
        .theme-cosmicBlues .full-content-modal {
            --modal-text-color: #e0f2f2; /* teal-100 */
            --modal-scrollbar-thumb: #008080; /* teal */
        }

        `}
    </style>
);


// –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
const loadingMessages = [
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–≤–µ–∑–¥—ã...",
    "–ó–∞–≥–ª—è–¥—ã–≤–∞—é –≤ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä...",
    "–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –¥—Ä–µ–≤–Ω–∏–µ –ø–∏—Å—å–º–µ–Ω–∞...",
    "–°–æ–µ–¥–∏–Ω—è—é—Å—å —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏...",
    "–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É—é –±—É–¥—É—â–µ–µ...",
    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—é –º–∞–≥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É...",
    "–®–µ–ø—á—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è...",
    "–ü–µ—Ä–µ–±–∏—Ä–∞—é –∫–∞—Ä—Ç—ã —Å—É–¥—å–±—ã...",
    "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...",
    "–ò—â—É –≤–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞—Ä—Ö–µ—Ç–∏–ø...",
    "–§–æ—Ä–º–∏—Ä—É—é –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ñ–æ–∫—É—Å...",
    "–û—Ç–∫—Ä—ã–≤–∞—é –ø–æ—Ä—Ç–∞–ª –∫ –∑–Ω–∞–Ω–∏—è–º...",
    "–°—á–∏—Ç—ã–≤–∞—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏...",
    "–ñ–¥—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–∏—Ä–æ–∑–¥–∞–Ω–∏—è...",
    "–ü—Ä–æ–±—É–∂–¥–∞—é –¥—Ä–µ–≤–Ω—é—é –º—É–¥—Ä–æ—Å—Ç—å...",
    "–°–æ–±–∏—Ä–∞—é –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –ø—ã–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...",
    "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —á–∞—Å—Ç–æ—Ç—ã —Å–æ–∑–Ω–∞–Ω–∏—è...",
    "–ü—Ä–∏–∑—ã–≤–∞—é –∫–æ—Å–º–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é...",
    "–ì–∞—Ä–º–æ–Ω–∏–∑–∏—Ä—É—é –ø–æ—Ç–æ–∫–∏ —Å—É–¥—å–±—ã...",
    "–ò–∑—É—á–∞—é –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–Ω—ã...",
    "–ù–∞–ø–æ–ª–Ω—è—é —Å—Ñ–µ—Ä—É –º—É–¥—Ä–æ—Å—Ç—å—é..."
];

// Thematic error messages
const thematicErrorMessages = {
    zodiacSign: "–ó–≤–µ–∑–¥—ã –º–æ–ª—á–∞—Ç –±–µ–∑ –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã!",
    userName: "–ò–º—è ‚Äî –∫–ª—é—á –∫ –≤–∞—à–µ–π —Å—É–¥—å–±–µ. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!",
    partnerName: "–î–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏ –¥–≤—É—Ö –¥—É—à –Ω—É–∂–Ω—ã –æ–±–∞ –∏–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞!",
    userBirthDate: "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —ç—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã —è –º–æ–≥ –∑–∞–≥–ª—è–Ω—É—Ç—å –≥–ª—É–±–∂–µ!",
    partnerBirthDate: "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –æ–±–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –∏—Ö, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø—É—Ç—å!",
    dreamDescription: "–ú–∏—Ä —Å–Ω–æ–≤ –∂–¥–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è! –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–Ω, —á—Ç–æ–±—ã —è –º–æ–≥ –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å.",
    tarotSpread: "–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –∂–¥—É—Ç –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—É–¥—å–±—É!",
    focusCategory: "–ß—Ç–æ–±—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é, –º–Ω–µ –Ω—É–∂–Ω–∞ —Ü–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
    userQuestion: "–í—Å–µ–ª–µ–Ω–Ω–∞—è –∂–¥–µ—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç!",
    unknownFunction: "–ú–æ–π —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä –Ω–µ –≤–∏–¥–∏—Ç —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π.",
    apiError: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –≤–æ–∑–º–æ–∂–Ω–æ, —ç–Ω–µ—Ä–≥–∏–∏ —Å–∫–æ—Ä–æ –≤—ã—Ä–æ–≤–Ω—è—é—Ç—Å—è."
};

// Full Content Modal Component
const FullContentModal = ({ content, onClose, theme }) => {
    return (
        <div className="full-content-modal-overlay">
            <div className={`full-content-modal ${theme}`} style={{ backgroundColor: `var(--modal-bg-color)`, borderColor: `var(--modal-border-color)` }}>
                <h3 className={`text-xl font-bold mb-4 ${themes[theme].h2Color}`}>–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:</h3>
                <p className={`${themes[theme].pColor}`}>
                    {content}
                </p>
                <button
                    onClick={onClose}
                    className={`
                        ${themes[theme].secondaryButtonBg}
                        text-white font-bold py-2 px-4 rounded-lg shadow-lg
                        transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                        focus:outline-none focus:ring-2 ${themes[theme].secondaryButtonFocusRing} focus:ring-opacity-75
                        mt-4 self-center
                    `}
                >
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        </div>
    );
};


// Main App component
const App = () => {
    const [userName, setUserName] = useState('');
    const [partnerName, setPartnerName] = useState('');
    const [zodiacSign, setZodiacSign] = useState('');
    const [userBirthDate, setUserBirthDate] = useState('');
    const [userBirthTime, setUserBirthTime] = useState('');
    const [partnerBirthDate, setPartnerBirthDate] = useState('');
    const [dreamDescription, setDreamDescription] = useState('');
    const [tarotSpread, setTarotSpread] = useState('');
    const [focusCategory, setFocusCategory] = useState('');
    const [userQuestion, setUserQuestion] = useState('');
    const [generatedContent, setGeneratedContent] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [errorMessage, setErrorMessage] = useState('');
    const [contentKey, setContentKey] = useState(0);
    const [currentView, setCurrentView] = useState('mainMenu');
    const [selectedFunction, setSelectedFunction] = useState(null);
    const [currentTheme, setCurrentTheme] = useState('darkMagic');
    const [showSettingsMenu, setShowSettingsMenu] = useState(false);
    const [loadingMessage, setLoadingMessage] = useState('');
    const [showAbout, setShowAbout] = useState(false);
    const [showFunctionListModal, setShowFunctionListModal] = useState(false);
    const [isCrystalBallActive, setIsCrystalBallActive] = useState(false); // For touch effect
    const [contentFontSizeClass, setContentFontSizeClass] = useState('text-base'); // Dynamic font size state
    const [showFullContentModal, setShowFullContentModal] = useState(false); // New state for "read more" modal

    // Carousel state for infinite scroll
    const actualFunctions = Object.values(functions);
    // Add clones for seamless looping: [last_item, ...actual_items, first_item]
    const extendedFunctions = [
        actualFunctions[actualFunctions.length - 1],
        ...actualFunctions,
        actualFunctions[0]
    ];
    const [currentPage, setCurrentPage] = useState(1); // Start at the first actual function
    const [allowTransition, setAllowTransition] = useState(true); // Controls CSS transition

    // Effect to handle snapping for infinite scroll
    useEffect(() => {
        if (!allowTransition) return; // Don't snap if transition is already off

        const timeout = setTimeout(() => {
            if (currentPage === 0) { // If we moved to the cloned last item
                setAllowTransition(false); // Turn off transition
                setCurrentPage(actualFunctions.length); // Snap to the actual last item
            } else if (currentPage === actualFunctions.length + 1) { // If we moved to the cloned first item
                setAllowTransition(false); // Turn off transition
                setCurrentPage(1); // Snap to the actual first item
            }
        }, 500); // Match this with your CSS transition duration

        return () => clearTimeout(timeout);
    }, [currentPage, allowTransition, actualFunctions.length]);

    // Effect for dynamic font size based on content length
    useEffect(() => {
        if (generatedContent) {
            const contentLen = generatedContent.length;
            if (contentLen < 200) {
                setContentFontSizeClass('text-base');
            } else if (contentLen >= 200 && contentLen < 400) {
                setContentFontSizeClass('text-sm');
            } else {
                setContentFontSizeClass('text-xs');
            }
        } else {
            setContentFontSizeClass('text-base'); // Reset when no content
        }
    }, [generatedContent]);


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const getRandomLoadingMessage = () => {
        return loadingMessages[Math.floor(Math.random() * loadingMessages.length)];
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const handleRegenerateContent = () => {
        if (selectedFunction) {
            handleGenerateContent();
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–û –ø—Ä–æ–µ–∫—Ç–µ" –∏ "–î–∏—Å–∫–ª–µ–π–º–µ—Ä"
    const renderAboutModal = () => (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex justify-center items-center z-50 p-4">
            <div className={`
                bg-gray-900 // –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π –∏ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                p-6 sm:p-8 rounded-lg shadow-lg text-center
                ${themes.darkMagic.textColor}
                max-w-md w-full mx-auto
                border ${themes.darkMagic.cardBorder}
                transition-all duration-500 ease-in-out // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            `}>
                <h2 className={`text-xl font-bold mb-4 ${themes.darkMagic.h2Color}`}>–û –ø—Ä–æ–µ–∫—Ç–µ "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ü—Ä–æ–≥–Ω–æ–∑–æ–≤"</h2>
                <p className="mb-4 text-sm sm:text-base">
                    –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –∞–Ω–∞–ª–∏–∑—ã.
                    –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö,
                    –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ –¥—Ä—É–≥–∏—Ö —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π.
                </p>
                <h2 className={`text-xl font-bold mb-4 ${themes.darkMagic.h2Color}`}>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</h2>
                <p className="mb-4 text-sm sm:text-base">
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–æ—Å—è—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                    —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –û–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏–ª–∏ –∫–∞–∫
                    –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –≤ –ª—é–±—ã—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏. –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –∑–¥—Ä–∞–≤–æ–º
                    —Å–º—ã—Å–ª–µ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.
                </p>
                <button onClick={() => setShowAbout(false)} className={`
                    ${themes.darkMagic.buttonBg}
                    text-white font-bold py-2 px-4 rounded-lg
                    focus:outline-none focus:ring-2 ${themes.darkMagic.buttonFocusRing} focus:ring-opacity-75
                    transition duration-300 ease-in-out hover:scale-105
                `}>
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        </div>
    );

    // Function to call the LLM API
    const generateText = async (prompt) => {
        setIsLoading(true);
        setErrorMessage('');
        setGeneratedContent('');
        setLoadingMessage(getRandomLoadingMessage()); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setShowFullContentModal(false); // Reset to hide full content modal on new generation

        try {
            // –í–∞—à API-–∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ.
            // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
            const apiKey = "AIzaSyByL6L_lTZIozrLRUu8SbAYhY6Fv-01yjM";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const payload = {
                contents: [{ role: "user", parts: [{ text: prompt }] }]
            };

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Gemini API Error:', errorData);
                throw new Error(`Gemini API Error: ${errorData.error?.message || response.statusText}`);
            }

            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setGeneratedContent(text);
                setContentKey(prevKey => prevKey + 1);
            } else {
                setGeneratedContent('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:', error);
            setErrorMessage(thematicErrorMessages.apiError);
        } finally {
            setIsLoading(false);
        }
    };

    // Handlers for specific content generation based on selected function
    const handleGenerateContent = () => {
        setErrorMessage('');
        let prompt = '';
        const currentDate = new Date().toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
        const currentTime = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

        // Reset all input errors
        let inputErrors = {};

        switch (selectedFunction) {
            case 'horoscope':
                if (!zodiacSign) {
                    inputErrors.zodiacSign = thematicErrorMessages.zodiacSign;
                }
                const signText = zodiacSign ? `–¥–ª—è ${zodiacSign}` : '–¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞';
                const birthTimeText = userBirthTime ? ` –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ${userBirthTime}` : '';
                prompt = `–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, ${currentDate}, ${signText}. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (${userBirthTime}), –¥–∞–π –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –õ—é–±–æ–≤—å, –ö–∞—Ä—å–µ—Ä–∞, –ó–¥–æ—Ä–æ–≤—å–µ. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'compatibility':
                if (!userName) inputErrors.userName = thematicErrorMessages.userName;
                if (!partnerName) inputErrors.partnerName = thematicErrorMessages.partnerName;
                prompt = `–û—Ü–µ–Ω–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–º–µ–Ω '${userName}' –∏ '${partnerName}' –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –§–∏–∑–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'compatibilityBirthDates':
                if (!userBirthDate) inputErrors.userBirthDate = thematicErrorMessages.userBirthDate;
                if (!partnerBirthDate) inputErrors.partnerBirthDate = thematicErrorMessages.partnerBirthDate;
                if (userBirthDate && partnerBirthDate) {
                    // Removed compatibility percentage logic
                } else if (!userBirthDate || !partnerBirthDate) {
                    inputErrors.userBirthDate = thematicErrorMessages.partnerBirthDates; // Reusing for "both dates" scenario
                }
                prompt = `–û—Ü–µ–Ω–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π —Å –¥–∞—Ç–∞–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è '${userBirthDate}' –∏ '${partnerBirthDate}' —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏. –†–∞–∑–±–µ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ø—É–Ω–∫—Ç—ã: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ, –§–∏–∑–∏—á–µ—Å–∫–∞—è –≥–∞—Ä–º–æ–Ω–∏—è. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'numerology':
                if (!userName) inputErrors.userName = thematicErrorMessages.userName;
                prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, ${currentDate}, –¥–ª—è –∏–º–µ–Ω–∏ '${userName}'. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —É–¥–∞—á–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'affirmation':
                prompt = `–ü—Ä–∏–¥—É–º–∞–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Ü–∏—Ç–∞—Ç—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ–∑–∏—Ç–∏–≤–æ–º –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ–º. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'funFact':
                prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç –æ–± –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'dailyAdvice':
                const daysOfWeek = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É'];
                const today = new Date();
                const dayName = daysOfWeek[today.getDay()];
                prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π, –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç –Ω–∞ ${dayName} (${currentDate}), —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–º —Ä–æ—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'tarotCard':
                if (!tarotSpread) {
                    inputErrors.tarotSpread = thematicErrorMessages.tarotSpread;
                }
                let tarotPrompt = '';
                if (tarotSpread === 'singleCard') {
                    tarotPrompt = `–í—ã—Ç—è–Ω–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –¥–Ω—è –¥–ª—è ${currentDate} –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–≤—à–∏—Å—å –Ω–∞ —Å–æ–≤–µ—Ç–µ –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏.`;
                } else if (tarotSpread === 'threeCardSpread') {
                    tarotPrompt = `–°–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –Ω–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã (–ü—Ä–æ—à–ª–æ–µ, –ù–∞—Å—Ç–æ—è—â–µ–µ, –ë—É–¥—É—â–µ–µ) –¥–ª—è ${currentDate}. –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å.`;
                }
                prompt = `${tarotPrompt} –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'birthPrediction':
                if (!userBirthDate) inputErrors.userBirthDate = thematicErrorMessages.userBirthDate;
                prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è '${userBirthDate}'. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'lunarCalendar':
                prompt = `–û–ø–∏—à–∏ —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –õ—É–Ω—ã –∏ –µ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, ${currentDate}. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'personalAmulet':
                if (!zodiacSign) {
                    inputErrors.zodiacSign = thematicErrorMessages.zodiacSign;
                }
                const amuletSignText = zodiacSign ? `–¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ ${zodiacSign}` : '';
                prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–º—É–ª–µ—Ç–∞ –∏–ª–∏ —Ç–∞–ª–∏—Å–º–∞–Ω–∞ (–∫–∞–º–µ–Ω—å, —Ü–≤–µ—Ç, —Å–∏–º–≤–æ–ª), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω ${amuletSignText} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, ${currentDate}. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'retrogradePlanets':
                prompt = `–û–ø–∏—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –µ—Å—Ç—å) –∏ –∏—Ö –æ–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, ${currentDate}. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'dreamInterpretation':
                if (!dreamDescription) inputErrors.dreamDescription = thematicErrorMessages.dreamDescription;
                prompt = `–ò—Å—Ç–æ–ª–∫—É–π —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–Ω —Å —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–π –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è: "${dreamDescription}". –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'astrologicalCalendar':
                prompt = `–û–ø–∏—à–∏ –≤–∞–∂–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ–ª—É–Ω–∏—è, –ø–æ–ª–Ω–æ–ª—É–Ω–∏—è, –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –≤ –∑–Ω–∞–∫–∏), –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É ${currentDate}. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'biorhythmCheck':
                if (!userBirthDate) inputErrors.userBirthDate = thematicErrorMessages.userBirthDate;
                prompt = `–†–∞—Å—Å—á–∏—Ç–∞–π –∏ –æ–ø–∏—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∏–æ—Ä–∏—Ç–º—ã –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è ${userBirthDate}, –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É ${currentDate}. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'positiveFocus':
                if (!focusCategory) inputErrors.focusCategory = thematicErrorMessages.focusCategory;
                prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ñ–æ–∫—É—Å –¥–Ω—è" –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${focusCategory}" –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, ${currentDate}. –í—ã–¥–∞–π —Ç–µ–º—É –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç–æ–∏—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è, —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            case 'questionToUniverse':
                if (!userQuestion) inputErrors.userQuestion = thematicErrorMessages.userQuestion;
                // Modified prompt for short, direct answers
                prompt = `–ù–∞ –≤–æ–ø—Ä–æ—Å "${userQuestion}" –æ—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: "–¥–∞", "–Ω–µ—Ç", "–±–æ–ª—å—à–µ –Ω–µ—Ç —á–µ–º –¥–∞", "–≤–æ–∑–º–æ–∂–Ω–æ", "—Å–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ". –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;
                break;
            case 'archetypeOfDay':
                prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ –∏ –æ–ø–∏—à–∏ "–ê—Ä—Ö–µ—Ç–∏–ø –¥–Ω—è" –¥–ª—è —Å–µ–≥–æ–¥–Ω—è, ${currentDate}. –û–±—ä—è—Å–Ω–∏, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞ –±—É–¥—É—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ Markdown.`;
                break;
            default:
                setErrorMessage(thematicErrorMessages.unknownFunction);
                return;
        }

        if (Object.keys(inputErrors).length > 0) {
            // Combine all thematic error messages into a single string
            const combinedErrorMessage = Object.values(inputErrors).join(' ');
            setErrorMessage(combinedErrorMessage);
            return;
        }

        generateText(prompt); // Removed .then() for compatibility percentage
    };

    const handleSelectFunction = (funcKey) => {
        setSelectedFunction(funcKey);
        setCurrentView('functionInput'); // Directly go to input view
        setGeneratedContent('');
        setErrorMessage('');
        setUserName('');
        setPartnerName('');
        setZodiacSign('');
        setUserBirthDate('');
        setUserBirthTime('');
        setPartnerBirthDate('');
        setDreamDescription('');
        setTarotSpread('');
        setFocusCategory('');
        setUserQuestion('');
        setShowFunctionListModal(false); // Close the modal if open
    };

    // Carousel navigation functions
    const goToNextPage = () => {
        setAllowTransition(true);
        setCurrentPage((prevPage) => prevPage + 1);
    };

    const goToPrevPage = () => {
        setAllowTransition(true);
        setCurrentPage((prevPage) => prevPage - 1);
    };

    // Function to get a summary (first 3 sentences)
    const getSummary = (text) => {
        if (!text) return '';
        const sentences = text.match(/[^.!?]+[.!?]*/g) || [];
        return sentences.slice(0, 3).join('').trim();
    };


    const renderMainMenu = () => (
        <div className="carousel-container">
            <div
                className="carousel-track"
                style={{
                    transform: `translateX(-${currentPage * 100}%)`,
                    transition: allowTransition ? 'transform 0.5s ease-in-out' : 'none'
                }}
            >
                {extendedFunctions.map((func, index) => (
                    <div key={index} className="carousel-page">
                        <button onClick={() => handleSelectFunction(func.key)} className={`
                            ${themes[currentTheme].buttonBg}
                            text-white rounded-lg shadow-lg
                            transform hover:scale-102 active:scale-95 transition-all duration-300 ease-in-out
                            focus:outline-none focus:ring-2 ${themes[currentTheme].buttonFocusRing} focus:ring-opacity-75
                            flex flex-col items-center justify-center text-center
                        `}>
                            <span className="">{func.icon}</span>
                            <span className="font-bold">{func.title}</span>
                            <span className="text-sm opacity-80 mt-2">{func.description}</span>
                        </button>
                    </div>
                ))}
            </div>
            {actualFunctions.length > 1 && ( // Only show arrows if there's more than one actual function
                <>
                    <button onClick={goToPrevPage} className={`carousel-arrow-button left-arrow ${currentTheme}`}>
                        <svg className="carousel-arrow-svg" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd"></path>
                        </svg>
                    </button>
                    <button onClick={goToNextPage} className={`carousel-arrow-button right-arrow ${currentTheme}`}>
                        <svg className="carousel-arrow-svg" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd"></path>
                        </svg>
                    </button>
                </>
            )}
        </div>
    );

    const renderFunctionDetails = () => (
        <div className="animate-fade-in transition-all duration-500 ease-in-out crystal-ball-content-wrapper">
            <h2 className={`text-xl sm:text-2xl font-bold text-center mb-6 ${themes[currentTheme].h2Color}`}>
                {functions[selectedFunction].title}
            </h2>
            <p className={`text-base ${themes[currentTheme].pColor} leading-relaxed mb-8 text-center`}>
                {functions[selectedFunction].description}
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-3"> {/* Reduced gap */}
                <button
                    onClick={() => setCurrentView('functionInput')}
                    className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg shadow-lg transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-75"
                >
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
                </button>
                <button
                    onClick={() => setCurrentView('mainMenu')}
                    className={`
                        ${themes[currentTheme].secondaryButtonBg}
                        text-white font-bold py-2 px-4 rounded-lg shadow-lg
                        transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                        focus:outline-none focus:ring-2 ${themes[currentTheme].secondaryButtonFocusRing} focus:ring-opacity-75
                    `}
                >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                </button>
            </div>
        </div>
    );

    const renderFunctionInput = () => {
        const func = functions[selectedFunction];
        // Helper to check if a specific thematic error message is present
        const hasThematicError = (key) => errorMessage.includes(thematicErrorMessages[key]);

        const isLongContent = (generatedContent.match(/[^.!?]+[.!?]*/g) || []).length > 3;
        const displayContent = isLongContent ? getSummary(generatedContent) : generatedContent;

        return (
            <div className={`animate-fade-in transition-all duration-500 ease-in-out crystal-ball-content-wrapper`}>
                <h2 className={`text-xl sm:text-2xl font-bold text-center mb-5 ${themes[currentTheme].h2Color}`}> {/* Reduced mb */}
                    {functions[selectedFunction].title}
                </h2>

                {func.inputs.length > 0 && (
                    <div className="grid grid-cols-1 gap-4 mb-6 w-full max-w-md"> {/* Reduced gap and mb */}
                        {func.inputs.includes('userName') && (
                            <div>
                                <label htmlFor="userName" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}> {/* Reduced mb */}
                                    –í–∞—à–µ –∏–º—è:
                                </label>
                                <input
                                    type="text"
                                    id="userName"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("userName") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].inputPlaceholder} ${themes[currentTheme].textColor} transition-all duration-300 ease-in-out`}
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–Ω–∞"
                                    value={userName}
                                    onChange={(e) => setUserName(e.target.value)}
                                    title="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤."
                                />
                                {hasThematicError("userName") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.userName}</p>}
                            </div>
                        )}
                        {func.inputs.includes('partnerName') && (
                            <div>
                                <label htmlFor="partnerName" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –ò–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:
                                </label>
                                <input
                                    type="text"
                                    id="partnerName"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("partnerName") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].inputPlaceholder} ${themes[currentTheme].textColor} transition-all duration-300 ease-in-out`}
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω"
                                    value={partnerName}
                                    onChange={(e) => setPartnerName(e.target.value)}
                                    title="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–º–µ–Ω."
                                />
                                {hasThematicError("partnerName") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.partnerName}</p>}
                            </div>
                        )}
                        {func.inputs.includes('zodiacSign') && (
                            <div>
                                <label htmlFor="zodiacSign" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:
                                </label>
                                <select
                                    id="zodiacSign"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("zodiacSign") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].textColor} appearance-none pr-8 ${themes[currentTheme].selectOptionBg} transition-all duration-300 ease-in-out`}
                                    value={zodiacSign}
                                    onChange={(e) => setZodiacSign(e.target.value)}
                                    title="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."
                                >
                                    <option value="" className={themes[currentTheme].selectOptionBg}>–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫</option>
                                    <option value="–û–≤–µ–Ω" className={themes[currentTheme].selectOptionBg}>–û–≤–µ–Ω</option>
                                    <option value="–¢–µ–ª–µ—Ü" className={themes[currentTheme].selectOptionBg}>–¢–µ–ª–µ—Ü</option>
                                    <option value="–ë–ª–∏–∑–Ω–µ—Ü—ã" className={themes[currentTheme].selectOptionBg}>–ë–ª–∏–∑–Ω–µ—Ü—ã</option>
                                    <option value="–†–∞–∫" className={themes[currentTheme].selectOptionBg}>–†–∞–∫</option>
                                    <option value="–õ–µ–≤" className={themes[currentTheme].selectOptionBg}>–õ–µ–≤</option>
                                    <option value="–î–µ–≤–∞" className={themes[currentTheme].selectOptionBg}>–î–µ–≤–∞</option>
                                    <option value="–í–µ—Å—ã" className={themes[currentTheme].selectOptionBg}>–í–µ—Å—ã</option>
                                    <option value="–°–∫–æ—Ä–ø–∏–æ–Ω" className={themes[currentTheme].selectOptionBg}>–°–∫–æ—Ä–ø–∏–æ–Ω</option>
                                    <option value="–°—Ç—Ä–µ–ª–µ—Ü" className={themes[currentTheme].selectOptionBg}>–°—Ç—Ä–µ–ª–µ—Ü</option>
                                    <option value="–ö–æ–∑–µ—Ä–æ–≥" className={themes[currentTheme].selectOptionBg}>–ö–æ–∑–µ—Ä–æ–≥</option>
                                    <option value="–í–æ–¥–æ–ª–µ–π" className={themes[currentTheme].selectOptionBg}>–í–æ–¥–æ–ª–µ–π</option>
                                    <option value="–†—ã–±—ã" className={themes[currentTheme].selectOptionBg}>–†—ã–±—ã</option>
                                </select>
                                {hasThematicError("zodiacSign") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.zodiacSign}</p>}
                            </div>
                        )}
                        {func.inputs.includes('userBirthDate') && (
                            <div>
                                <label htmlFor="userBirthDate" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:
                                </label>
                                <input
                                    type="date"
                                    id="userBirthDate"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${(hasThematicError("userBirthDate") || hasThematicError("partnerBirthDate")) ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].inputPlaceholder} ${themes[currentTheme].textColor} transition-all duration-300 ease-in-out`}
                                    value={userBirthDate}
                                    onChange={(e) => setUserBirthDate(e.target.value)}
                                    title="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."
                                />
                                {(hasThematicError("userBirthDate") || hasThematicError("partnerBirthDate")) && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.userBirthDate}</p>}
                            </div>
                        )}
                        {func.inputs.includes('userBirthTime') && (
                            <div>
                                <label htmlFor="userBirthTime" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –í–∞—à–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
                                </label>
                                <input
                                    type="time"
                                    id="userBirthTime"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].inputPlaceholder} ${themes[currentTheme].textColor} transition-all duration-300 ease-in-out`}
                                    value={userBirthTime}
                                    onChange={(e) => setUserBirthTime(e.target.value)}
                                    title="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞."
                                />
                            </div>
                        )}
                        {func.inputs.includes('partnerBirthDate') && (
                            <div>
                                <label htmlFor="partnerBirthDate" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:
                                </label>
                                <input
                                    type="date"
                                    id="partnerBirthDate"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("partnerBirthDate") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].inputPlaceholder} ${themes[currentTheme].textColor} transition-all duration-300 ease-in-out`}
                                    value={partnerBirthDate}
                                    onChange={(e) => setPartnerBirthDate(e.target.value)}
                                    title="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
                                />
                                {hasThematicError("partnerBirthDate") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.partnerBirthDate}</p>}
                            </div>
                        )}
                        {func.inputs.includes('dreamDescription') && (
                            <div>
                                <label htmlFor="dreamDescription" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–Ω:
                                </label>
                                <textarea
                                    id="dreamDescription"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("dreamDescription") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].inputPlaceholder} ${themes[currentTheme].textColor} h-24 resize-y transition-all duration-300 ease-in-out`}
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –º–Ω–µ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å, —á—Ç–æ —è –ª–µ—á—É –Ω–∞–¥ –≥–æ—Ä–æ–¥–æ–º..."
                                    value={dreamDescription}
                                    onChange={(e) => setDreamDescription(e.target.value)}
                                    title="–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–Ω –¥–ª—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è."
                                ></textarea>
                                {hasThematicError("dreamDescription") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.dreamDescription}</p>}
                            </div>
                        )}
                        {func.inputs.includes('tarotSpread') && (
                            <div>
                                <label htmlFor="tarotSpread" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ:
                                </label>
                                <select
                                    id="tarotSpread"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("tarotSpread") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].textColor} appearance-none pr-8 ${themes[currentTheme].selectOptionBg} transition-all duration-300 ease-in-out`}
                                    value={tarotSpread}
                                    onChange={(e) => setTarotSpread(e.target.value)}
                                    title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ."
                                >
                                    <option value="" className={themes[currentTheme].selectOptionBg}>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</option>
                                    <option value="singleCard" className={themes[currentTheme].selectOptionBg}>–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞</option>
                                    <option value="threeCardSpread" className={themes[currentTheme].selectOptionBg}>–†–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã (–ü—Ä–æ—à–ª–æ–µ, –ù–∞—Å—Ç–æ—è—â–µ–µ, –ë—É–¥—É—â–µ–µ)</option>
                                </select>
                                {hasThematicError("tarotSpread") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.tarotSpread}</p>}
                            </div>
                        )}
                        {func.inputs.includes('focusCategory') && (
                            <div>
                                <label htmlFor="focusCategory" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–æ–∫—É—Å–∞:
                                </label>
                                <select
                                    id="focusCategory"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("focusCategory") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].textColor} appearance-none pr-8 ${themes[currentTheme].selectOptionBg} transition-all duration-300 ease-in-out`}
                                    value={focusCategory}
                                    onChange={(e) => setFocusCategory(e.target.value)}
                                    title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞ –¥–Ω—è."
                                >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                    <option value="–õ—é–±–æ–≤—å">–õ—é–±–æ–≤—å</option>
                                    <option value="–ö–∞—Ä—å–µ—Ä–∞">–ö–∞—Ä—å–µ—Ä–∞</option>
                                    <option value="–ó–¥–æ—Ä–æ–≤—å–µ">–ó–¥–æ—Ä–æ–≤—å–µ</option>
                                    <option value="–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç">–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç</option>
                                    <option value="–§–∏–Ω–∞–Ω—Å—ã">–§–∏–Ω–∞–Ω—Å—ã</option>
                                </select>
                                {hasThematicError("focusCategory") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.focusCategory}</p>}
                            </div>
                        )}
                        {func.inputs.includes('userQuestion') && (
                            <div>
                                <label htmlFor="userQuestion" className={`block text-sm font-medium ${themes[currentTheme].textColor} mb-1`}>
                                    –í–∞—à –≤–æ–ø—Ä–æ—Å –∫ –í—Å–µ–ª–µ–Ω–Ω–æ–π:
                                </label>
                                <textarea
                                    id="userQuestion"
                                    className={`w-full px-3 py-2 rounded-lg ${themes[currentTheme].inputBg} ${themes[currentTheme].inputBorder} border ${hasThematicError("userQuestion") ? 'border-red-500' : ''} ${themes[currentTheme].inputFocusRing} ${themes[currentTheme].inputPlaceholder} ${themes[currentTheme].textColor} h-24 resize-y transition-all duration-300 ease-in-out`}
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ?"
                                    value={userQuestion}
                                    onChange={(e) => setUserQuestion(e.target.value)}
                                    title="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
                                ></textarea>
                                {hasThematicError("userQuestion") && <p className="text-red-500 text-xs mt-1">{thematicErrorMessages.userQuestion}</p>}
                            </div>
                        )}
                    </div>
                )}

                <div className="flex flex-col sm:flex-row justify-center gap-3 mb-6 w-full max-w-md"> {/* Reduced gap and mb */}
                    {!generatedContent && ( // Only show "Generate" button if content is not yet generated
                        <button
                            onClick={handleGenerateContent}
                            className={`
                                ${themes[currentTheme].buttonBg} text-white font-bold py-2 px-4 rounded-lg shadow-lg
                                transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                                focus:outline-none focus:ring-2 ${themes[currentTheme].buttonFocusRing} focus:ring-opacity-75
                            `}
                            disabled={isLoading}
                        >
                            {isLoading ? (
                                <div className="flex items-center justify-center">
                                    <div className={`animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 ${themes[currentTheme].loaderBorder} mr-2`}></div> {/* Reduced loader size */}
                                    {loadingMessage}
                                </div>
                            ) : (
                                func.generateButtonText
                            )}
                        </button>
                    )}
                    {generatedContent && !isLoading && (
                        <button
                            onClick={handleRegenerateContent}
                            className={`
                                ${themes[currentTheme].secondaryButtonBg}
                                text-white font-bold py-2 px-4 rounded-lg shadow-lg
                                transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                                focus:outline-none focus:ring-2 ${themes[currentTheme].secondaryButtonFocusRing} focus:ring-opacity-75
                            `}
                        >
                            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    )}
                    <button
                        onClick={() => {
                            setCurrentView('mainMenu');
                            setGeneratedContent('');
                            setErrorMessage('');
                        }}
                        className={`
                            ${themes[currentTheme].secondaryButtonBg}
                            text-white font-bold py-2 px-4 rounded-lg shadow-lg
                            transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                            focus:outline-none focus:ring-2 ${themes[currentTheme].secondaryButtonFocusRing} focus:ring-opacity-75
                        `}
                    >
                        –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    </button>
                </div>

                {errorMessage && (
                    <div className={`
                        ${themes[currentTheme].errorBg} ${themes[currentTheme].errorBorder} border
                        ${themes[currentTheme].errorText} p-3 rounded-lg mb-5 text-center animate-fade-in transition-all duration-300 ease-in-out w-full max-w-md
                    `}> {/* Reduced padding and mb */}
                        {errorMessage}
                    </div>
                )}

                {generatedContent && (
                    <div key={contentKey} className={`
                        w-full max-w-md prediction-text-reveal flex flex-col items-center
                    `}>
                        {/* –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–µ—Å—å: —É–º–µ–Ω—å—à–µ–Ω —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ –æ—Ç—Å—Ç—É–ø –Ω–∞–¥–ø–∏—Å–∏ "–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑:" */}
                        <h2 className={`text-sm sm:text-base font-semibold ${themes[currentTheme].h2Color} mb-1`}>
                            –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑:
                        </h2>
                        <div className={`w-full relative overflow-hidden ${isLongContent ? 'fade-out-mask-text' : ''}`}>
                            <p
                                className={`${contentFontSizeClass} ${themes[currentTheme].pColor} font-serif font-normal whitespace-pre-wrap`}
                                // –ê—Ç—Ä–∏–±—É—Ç style –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–µ–π, –≤–∫–ª—é—á–∞—è CSS-–ø–µ—Ä–µ–º–µ–Ω–≤—ã–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–≤–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
                                style={{ '--text-glow-color': themes[currentTheme].textGlowColor, '--text-glow-color-secondary': themes[currentTheme].textGlowColorSecondary }}
                            >
                                {displayContent} {/* Display summarized content here */}
                            </p>
                        </div>
                        {isLongContent && (
                            <button
                                onClick={() => setShowFullContentModal(true)} // Open the modal
                                className={`
                                    mt-4 py-1 px-2 text-xs
                                    ${themes[currentTheme].secondaryButtonBg}
                                    text-white font-bold rounded-lg shadow-lg
                                    transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                                    focus:outline-none focus:ring-2 ${themes[currentTheme].secondaryButtonFocusRing} focus:ring-opacity-75
                                `}
                            >
                                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </button>
                        )}
                        {/* Removed the conditional rendering for "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å..." */}
                    </div>
                )}
            </div>
        );
    };

    const renderFunctionListModal = () => (
        <div className="function-list-modal-overlay">
            <div className={`function-list-modal ${currentTheme}`} style={{ backgroundColor: `var(--modal-bg-color)` }}>
                <h3>–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π</h3>
                <div className="function-list-modal-grid">
                    {Object.keys(functions).map((key) => (
                        <button
                            key={key}
                            onClick={() => handleSelectFunction(key)}
                            className=""
                        >
                            <span>{functions[key].icon}</span>
                            <span>{functions[key].title}</span>
                        </button>
                    ))}
                </div>
                <button
                    onClick={() => setShowFunctionListModal(false)}
                    className={`function-list-modal-close-button ${currentTheme}`}
                >
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        </div>
    );

    const themeKeys = Object.keys(themes);

    const handleCycleTheme = () => {
        const currentIndex = themeKeys.indexOf(currentTheme);
        const nextIndex = (currentIndex + 1) % themeKeys.length;
        setCurrentTheme(themeKeys[nextIndex]);
    };

    return (
        <>
            <GlobalStyles /> {/* Inject global CSS animations */}
            {/* SVG filter for micro-cracks/imperfections */}
            <svg width="0" height="0" style={{ position: 'absolute', zIndex: -1 }}>
                <filter id="noiseFilter">
                    <feTurbulence type="fractalNoise" baseFrequency="0.65" numOctaves="3" stitchTiles="stitch" result="f1" />
                    <feColorMatrix type="matrix" values="0 0 0 0 0, 0 0 0 0 0, 0 0 0 0 0, 0 0 0 -1.5 1.5" result="f2" />
                    <feComposite operator="in" in2="SourceGraphic" in="f2" result="f3" />
                    <feComposite operator="arithmetic" k1="0" k2="1" k3="1" k4="0" in="SourceGraphic" in2="f3" />
                </filter>
            </svg>

            <div className={`min-h-screen w-full bg-gradient-to-br ${themes[currentTheme].gradient} ${themes[currentTheme].textColor} p-4 sm:p-8 flex flex-col items-center justify-center font-inter background-animated transition-colors duration-500 ease-in-out`}>
                {/* Background elements (stars/particles) - Layer 1 (farthest) */}
                <div className="background-elements"></div>
                {/* Background elements (stars/particles) - Layer 2 (mid-distance) */}
                <div className="background-elements layer-2"></div>
                {/* Background elements (stars/particles) - Layer 3 (closest) */}
                <div className="background-elements layer-3"></div>

                {/* Northern Lights background layer */}
                <div className="northern-lights-bg"></div>

                {/* Top right controls */}
                <div className="absolute top-4 right-4 z-10 flex flex-col items-end space-y-2">
                    {/* Settings Icon and Dropdown */}
                    <div className="relative z-20">
                        <button
                            onClick={() => setShowSettingsMenu(!showSettingsMenu)}
                            className={`
                                ${themes[currentTheme].secondaryButtonBg}
                                text-white p-3 rounded-full shadow-lg
                                focus:outline-none focus:ring-2 ${themes[currentTheme].secondaryButtonFocusRing} focus:ring-opacity-75
                                transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                            `}
                            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                        >
                            <span className="text-xl">‚öôÔ∏è</span>
                        </button>
                        {showSettingsMenu && (
                            <div className={`
                                absolute right-0 mt-2 w-48 rounded-md shadow-lg
                                bg-gray-900 ring-1 ring-black ring-opacity-5 focus:outline-none
                                transition-all duration-300 ease-in-out transform origin-top-right scale-100 opacity-100 z-30`}>
                                <div className="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                                    {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã */}
                                    <button
                                        onClick={handleCycleTheme}
                                        className={`
                                            ${themes[currentTheme].textColor} block w-full text-left px-4 py-2 text-sm
                                            hover:bg-opacity-20 hover:bg-white transition-colors duration-200 ease-in-out
                                        `}
                                        role="menuitem"
                                    >
                                        –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É üé®
                                    </button>
                                    {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è "–û –ø—Ä–æ–µ–∫—Ç–µ" */}
                                    <button
                                        onClick={() => {
                                            setShowAbout(true);
                                            setShowSettingsMenu(false);
                                        }}
                                        className={`
                                            ${themes[currentTheme].textColor} block w-full text-left px-4 py-2 text-sm
                                            hover:bg-opacity-20 hover:bg-white border-t border-gray-700 mt-1 pt-2 transition-colors duration-200 ease-in-out
                                        `}
                                        role="menuitem"
                                    >
                                        –û –ø—Ä–æ–µ–∫—Ç–µ ‚ÑπÔ∏è
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>
                    {/* New button for function list, outside the dropdown */}
                    <button
                        onClick={() => setShowFunctionListModal(true)}
                        className={`
                            ${themes[currentTheme].secondaryButtonBg}
                            text-white p-3 rounded-full shadow-lg
                            focus:outline-none focus:ring-2 ${themes[currentTheme].secondaryButtonFocusRing} focus:ring-opacity-75
                            transform hover:scale-105 active:scale-95 transition-all duration-300 ease-in-out
                        `}
                        title="–°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π"
                    >
                        <span className="text-xl">üìã</span>
                    </button>
                </div>

                {/* Moved title outside the crystal ball */}
                <h1 className={`absolute top-10 sm:top-16 text-2xl sm:text-3xl font-bold ${themes[currentTheme].h1Color} drop-shadow-lg text-center px-4 z-0`}>
                    üîÆ –¢–≤–æ–π –ü—Ä–æ–≥–Ω–æ–∑ üåü
                </h1>

                {/* Crystal Ball and Stand Wrapper (now just the ball) */}
                <div className="crystal-ball-and-stand-wrapper">
                    <div className={`
                        crystal-ball
                        ${themes[currentTheme].crystalBallAnimation ? `animate-[${themes[currentTheme].crystalBallAnimation}_4s_infinite_alternate]` : ''}
                        ${isCrystalBallActive ? 'touch-active' : ''}
                        `}
                        style={{
                            background: themes[currentTheme].crystalBallBackground,
                            boxShadow: themes[currentTheme].crystalBallShadowStart,
                            '--crystal-ball-shadow-start': themes[currentTheme].crystalBallShadowStart,
                            '--crystal-ball-shadow-end': themes[currentTheme].crystalBallShadowEnd,
                        }}
                        onMouseEnter={() => setIsCrystalBallActive(true)}
                        onMouseLeave={() => setIsCrystalBallActive(false)}
                        onMouseDown={() => setIsCrystalBallActive(true)}
                        onMouseUp={() => setIsCrystalBallActive(false)}
                    >
                        {/* Inner Fog Effect */}
                        <div className="inner-fog"></div>

                        <div className="crystal-ball-content-wrapper">
                            {currentView === 'mainMenu' && renderMainMenu()}
                            {currentView === 'functionDetails' && selectedFunction && renderFunctionDetails()}
                            {currentView === 'functionInput' && selectedFunction && renderFunctionInput()}
                        </div>
                    </div>
                </div>

                {showAbout && renderAboutModal()}
                {showFunctionListModal && renderFunctionListModal()}
                {showFullContentModal && (
                    <FullContentModal
                        content={generatedContent}
                        onClose={() => setShowFullContentModal(false)}
                        theme={currentTheme}
                    />
                )}

                {/* Vignette effect */}
                <div className="vignette"></div>
            </div>
        </>
    );
};

export default App;